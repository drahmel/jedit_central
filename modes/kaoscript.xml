<?xml version="1.0"?>
<!DOCTYPE MODE SYSTEM "xmode.dtd">

<!-- kaoscript mode by Baptiste Augrain -->
<MODE>
	<PROPS>
		<PROPERTY NAME="commentStart" VALUE="/*" />
		<PROPERTY NAME="commentEnd" VALUE="*/" />
		<PROPERTY NAME="lineComment" VALUE="//" />
		<PROPERTY NAME="wordBreakChars" VALUE=",+-=&lt;&gt;/?^&amp;*" />
		
		<PROPERTY NAME="indentOpenBrackets" VALUE="{[" />
		<PROPERTY NAME="indentCloseBrackets" VALUE="]}" />
		<PROPERTY NAME="unalignedOpenBrackets" VALUE="(" />
		<PROPERTY NAME="unalignedCloseBrackets" VALUE=")" />
		<PROPERTY NAME="electricKeys" VALUE=":" />
	</PROPS>
	
	<RULES IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE" DIGIT_RE="(0x[\p{XDigit}]+[lL]?|[\p{Digit}]+(e[\p{Digit}]*)?[lLdDfF]?|\d[a-zA-Z0-9_.]*)" NO_WORD_SEP="_$@"><!-- {{{ -->
		<SPAN TYPE="COMMENT3" DELEGATE="COMMENT_BLOCK_HEADER">
			<BEGIN>/**</BEGIN>
			<END>*/</END>
		</SPAN>
		
		<SPAN TYPE="COMMENT4">
			<BEGIN>---</BEGIN>
			<END>---</END>
		</SPAN>
		
		<EOL_SPAN_REGEXP TYPE="KEYWORD1" HASH_CHAR="m" DELEGATE="MACRO" AT_WHITESPACE_END="TRUE">macro\b</EOL_SPAN_REGEXP>
		
		<IMPORT DELEGATE="EXPRESSION"/>
	</RULES><!-- }}} -->
	
	<RULES SET="ATTRIBUTE" IGNORE_CASE="FALSE"><!-- {{{ -->
		<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" ESCAPE="\">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>
		
		<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" ESCAPE="\">
			<BEGIN>'</BEGIN>
			<END>'</END>
		</SPAN>
		
		<MARK_PREVIOUS TYPE="FUNCTION" MATCH_TYPE="OPERATOR">(</MARK_PREVIOUS>
		
		<SEQ TYPE="OPERATOR">)</SEQ>
		<SEQ TYPE="OPERATOR">=</SEQ>
		<SEQ TYPE="OPERATOR">,</SEQ>
	</RULES><!-- }}} -->
	
	<RULES SET="COMMENT_BLOCK" DEFAULT="COMMENT1"><!-- {{{ -->
		<SPAN TYPE="COMMENT1" DELEGATE="COMMENT_BLOCK">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>
	</RULES><!-- }}} -->
	
	<RULES SET="COMMENT_BLOCK_HEADER" DEFAULT="COMMENT3"><!-- {{{ -->
		<SPAN TYPE="COMMENT3" DELEGATE="COMMENT_BLOCK_HEADER">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>
	</RULES><!-- }}} -->
	
	<RULES SET="EMBEDDED_EXPRESSION"><!-- {{{ -->
		<IMPORT DELEGATE="EXPRESSION"/>
		
		<SPAN MATCH_TYPE="OPERATOR" DELEGATE="EMBEDDED_EXPRESSION">
			<BEGIN>(</BEGIN>
			<END>)</END>
		</SPAN>
	</RULES><!-- }}} -->
	
	<RULES SET="EXPRESSION" IGNORE_CASE="FALSE"><!-- {{{ -->
		<IMPORT DELEGATE="TYPE_STATEMENT"/>
		
		<SPAN TYPE="COMMENT1" DELEGATE="COMMENT_BLOCK">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>
		
		<EOL_SPAN TYPE="COMMENT2">//</EOL_SPAN>
		
		<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" ESCAPE="\">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>
		
		<SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE" ESCAPE="\">
			<BEGIN>'</BEGIN>
			<END>'</END>
		</SPAN>
		
		<SPAN TYPE="LITERAL1" DELEGATE="TEMPLATE" NO_LINE_BREAK="TRUE">
			<BEGIN>`</BEGIN>
			<END>`</END>
		</SPAN>
		
		<EOL_SPAN TYPE="KEYWORD2" DELEGATE="ATTRIBUTE" AT_WHITESPACE_END="TRUE">
			<BEGIN>#[</BEGIN>
			<END>]</END>
		</EOL_SPAN>
		<EOL_SPAN TYPE="KEYWORD2" DELEGATE="ATTRIBUTE" AT_WHITESPACE_END="TRUE">
			<BEGIN>#![</BEGIN>
			<END>]</END>
		</EOL_SPAN>
		
		<EOL_SPAN_REGEXP TYPE="KEYWORD1" HASH_CHARS="ir" DELEGATE="IMPORT" AT_WHITESPACE_END="TRUE">
			<BEGIN>(?:require\|)?import\s*\{</BEGIN>
			<END>}</END>
		</EOL_SPAN_REGEXP>
		
		<EOL_SPAN_REGEXP TYPE="KEYWORD1" HASH_CHARS="ir" DELEGATE="IMPORT" AT_WHITESPACE_END="TRUE">(?:require\|)?import\s+</EOL_SPAN_REGEXP>
		
		<EOL_SPAN_REGEXP TYPE="KEYWORD1" HASH_CHAR="i" DELEGATE="INCLUDE" AT_WHITESPACE_END="TRUE">
			<BEGIN>include(?: again)?\s+\{</BEGIN>
			<END>}</END>
		</EOL_SPAN_REGEXP>
		
		<EOL_SPAN_REGEXP TYPE="KEYWORD1" HASH_CHAR="i" DELEGATE="INCLUDE" AT_WHITESPACE_END="TRUE">include(?: again)?\s+</EOL_SPAN_REGEXP>
		
		<SEQ_REGEXP TYPE="MARKUP" HASH_CHAR="/" AT_WORD_START="TRUE">/[^\p{Blank}]*?/</SEQ_REGEXP>
		
		<SEQ_REGEXP TYPE="KEYWORD1" HASH_CHARS="i" AT_WORD_START="TRUE">\b(?:is not)\b</SEQ_REGEXP>
		
		<MARK_PREVIOUS TYPE="FUNCTION" MATCH_TYPE="OPERATOR">!(</MARK_PREVIOUS>
		<SEQ TYPE="OPERATOR">=</SEQ>
		<SEQ TYPE="OPERATOR">!</SEQ>
		<SEQ TYPE="OPERATOR">&gt;=</SEQ>
		<SEQ TYPE="OPERATOR">&lt;=</SEQ>
		<SEQ TYPE="OPERATOR">+</SEQ>
		<SEQ TYPE="OPERATOR">-</SEQ>
		<SEQ TYPE="OPERATOR">/</SEQ>
		<SEQ TYPE="OPERATOR">*</SEQ>
		<SEQ TYPE="OPERATOR">&gt;</SEQ>
		<SEQ TYPE="OPERATOR">&lt;</SEQ>
		<SEQ TYPE="OPERATOR">%</SEQ>
		<SEQ TYPE="OPERATOR">&amp;</SEQ>
		<SEQ TYPE="OPERATOR">|</SEQ>
		<SEQ TYPE="OPERATOR">^</SEQ>
		<SEQ TYPE="OPERATOR">~</SEQ>
		<SEQ TYPE="OPERATOR">.</SEQ>
		<SEQ TYPE="OPERATOR">,</SEQ>
		<SEQ TYPE="OPERATOR">]</SEQ>
		<SEQ TYPE="OPERATOR">[</SEQ>
		<SEQ TYPE="OPERATOR">?</SEQ>
		<SEQ TYPE="OPERATOR">::</SEQ>
		
		<MARK_PREVIOUS TYPE="LABEL" AT_WHITESPACE_END="TRUE" MATCH_TYPE="OPERATOR">:</MARK_PREVIOUS>
		<SEQ TYPE="OPERATOR">:</SEQ>
		
		<SEQ_REGEXP TYPE="KEYWORD3" HASH_CHARS="@" AT_WORD_START="TRUE">@[a-zA-Z0-9_$]+\b</SEQ_REGEXP>
		
		<KEYWORDS>
			<KEYWORD3>this</KEYWORD3>
			<KEYWORD3>super</KEYWORD3>
			
			<KEYWORD1>await</KEYWORD1>
			<KEYWORD1>break</KEYWORD1>
			<KEYWORD1>by</KEYWORD1>
			<KEYWORD1>catch</KEYWORD1>
			<KEYWORD1>const</KEYWORD1>
			<KEYWORD1>continue</KEYWORD1>
			<KEYWORD1>constructor</KEYWORD1>
			<KEYWORD1>delete</KEYWORD1>
			<KEYWORD1>desc</KEYWORD1>
			<KEYWORD1>destructor</KEYWORD1>
			<KEYWORD1>do</KEYWORD1>
			<KEYWORD1>else</KEYWORD1>
			<KEYWORD1>export</KEYWORD1>
			<KEYWORD1>extends</KEYWORD1>
			<KEYWORD1>extern</KEYWORD1>
			<KEYWORD1>finally</KEYWORD1>
			<KEYWORD1>for</KEYWORD1>
			<KEYWORD1>from</KEYWORD1>
			<KEYWORD1>impl</KEYWORD1>
			<KEYWORD1>if</KEYWORD1>
			<KEYWORD1>in</KEYWORD1>
			<KEYWORD1>is</KEYWORD1>
			<KEYWORD1>let</KEYWORD1>
			<KEYWORD1>new</KEYWORD1>
			<KEYWORD1>of</KEYWORD1>
			<KEYWORD1>on</KEYWORD1>
			<KEYWORD1>require</KEYWORD1>
			<KEYWORD1>return</KEYWORD1>
			<KEYWORD1>switch</KEYWORD1>
			<KEYWORD1>til</KEYWORD1>
			<KEYWORD1>to</KEYWORD1>
			<KEYWORD1>throw</KEYWORD1>
			<KEYWORD1>try</KEYWORD1>
			<KEYWORD1>unless</KEYWORD1>
			<KEYWORD1>until</KEYWORD1>
			<KEYWORD1>when</KEYWORD1>
			<KEYWORD1>while</KEYWORD1>
			<KEYWORD1>with</KEYWORD1>
			
			<LITERAL2>false</LITERAL2>
			<LITERAL2>null</LITERAL2>
			<LITERAL2>true</LITERAL2>
			<LITERAL2>NaN</LITERAL2>
			<LITERAL2>Infinity</LITERAL2>
		</KEYWORDS>
	</RULES><!-- }}} -->
	
	<RULES SET="IMPORT" IGNORE_CASE="FALSE"><!-- {{{ -->
		<IMPORT DELEGATE="TYPE_STATEMENT"/>
		
		<EOL_SPAN TYPE="COMMENT2">//</EOL_SPAN>
		
		<SPAN TYPE="COMMENT1" DELEGATE="COMMENT_BLOCK">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>
		
		<SPAN NO_LINE_BREAK="TRUE" ESCAPE="\" DELEGATE="PATH">
			<BEGIN>'</BEGIN>
			<END>'</END>
		</SPAN>
		
		<SPAN NO_LINE_BREAK="TRUE" ESCAPE="\" DELEGATE="PATH">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>
		
		<SPAN MATCH_TYPE="OPERATOR" DELEGATE="IMPORT">
			<BEGIN>{</BEGIN>
			<END>}</END>
		</SPAN>
		
		<SEQ TYPE="OPERATOR">(</SEQ>
		<SEQ TYPE="OPERATOR">)</SEQ>
		<SEQ TYPE="OPERATOR">:</SEQ>
		<SEQ TYPE="OPERATOR">,</SEQ>
		<SEQ TYPE="OPERATOR">*</SEQ>
		
		<SEQ TYPE="FUNCTION">=&gt;</SEQ>
		
		<KEYWORDS>
			<KEYWORD1>for</KEYWORD1>
		</KEYWORDS>
	</RULES><!-- }}} -->
	
	<RULES SET="INCLUDE"><!-- {{{ -->
		<EOL_SPAN TYPE="COMMENT2">//</EOL_SPAN>
		
		<SPAN TYPE="COMMENT1" DELEGATE="COMMENT_BLOCK">
			<BEGIN>/*</BEGIN>
			<END>*/</END>
		</SPAN>
		
		<SPAN NO_LINE_BREAK="TRUE" ESCAPE="\" DELEGATE="PATH">
			<BEGIN>'</BEGIN>
			<END>'</END>
		</SPAN>
		
		<SPAN NO_LINE_BREAK="TRUE" ESCAPE="\" DELEGATE="PATH">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>
		
		<SPAN MATCH_TYPE="OPERATOR" DELEGATE="INCLUDE">
			<BEGIN>{</BEGIN>
			<END>}</END>
		</SPAN>
	</RULES><!-- }}} -->
	
	<RULES SET="MACRO"><!-- {{{ -->
		<IMPORT DELEGATE="EXPRESSION"/>
		
		<SPAN_REGEXP TYPE="KEYWORD3" HASH_CHAR="#" DELEGATE="EMBEDDED_EXPRESSION">
			<BEGIN>#[abei]?\(</BEGIN>
			<END>)</END>
		</SPAN_REGEXP>
		
		<SEQ_REGEXP TYPE="KEYWORD3" HASH_CHARS="#" AT_WORD_START="TRUE">#[a-zA-Z0-9_$]+\b</SEQ_REGEXP>
		
		<SPAN MATCH_TYPE="OPERATOR" DELEGATE="MACRO">
			<BEGIN>{</BEGIN>
			<END>}</END>
		</SPAN>
		
		<MARK_PREVIOUS TYPE="FUNCTION" MATCH_TYPE="OPERATOR">(</MARK_PREVIOUS>
		<SPAN MATCH_TYPE="OPERATOR" DELEGATE="MACRO">
			<BEGIN>(</BEGIN>
			<END>)</END>
		</SPAN>
	</RULES><!-- }}} -->
	
	<RULES SET="PATH" DEFAULT="LITERAL1"><!-- {{{ -->
		<SEQ TYPE="MARKUP">@</SEQ>
		<SEQ TYPE="MARKUP">/</SEQ>
		<SEQ TYPE="MARKUP">.</SEQ>
	</RULES><!-- }}} -->
	
	<RULES SET="TEMPLATE" DEFAULT="LITERAL1"><!-- {{{ -->
		<SPAN TYPE="LABEL" MATCH_TYPE="LITERAL3" DELEGATE="EMBEDDED_EXPRESSION">
			<BEGIN>\(</BEGIN>
			<END>)</END>
		</SPAN>
	</RULES><!-- }}} -->
	
	<RULES SET="TYPE_STATEMENT" IGNORE_CASE="FALSE"><!-- {{{ -->
		<MARK_PREVIOUS TYPE="FUNCTION" MATCH_TYPE="OPERATOR">(</MARK_PREVIOUS>
		<SEQ TYPE="OPERATOR">)</SEQ>
		<SEQ TYPE="OPERATOR">}</SEQ>
		<SEQ TYPE="OPERATOR">{</SEQ>
		
		<KEYWORDS>
			<KEYWORD1>abstract</KEYWORD1>
			<KEYWORD1>async</KEYWORD1>
			<KEYWORD1>class</KEYWORD1>
			<KEYWORD1>enum</KEYWORD1>
			<KEYWORD1>func</KEYWORD1>
			<KEYWORD1>macro</KEYWORD1>
			<KEYWORD1>namespace</KEYWORD1>
			<KEYWORD1>private</KEYWORD1>
			<KEYWORD1>protected</KEYWORD1>
			<KEYWORD1>public</KEYWORD1>
			<KEYWORD1>sealed</KEYWORD1>
			<KEYWORD1>static</KEYWORD1>
			<KEYWORD1>type</KEYWORD1>
			
			<KEYWORD3>array</KEYWORD3>
			<KEYWORD3>Array</KEYWORD3>
			<KEYWORD3>bool</KEYWORD3>
			<KEYWORD3>Boolean</KEYWORD3>
			<KEYWORD3>Class</KEYWORD3>
			<KEYWORD3>Enum</KEYWORD3>
			<KEYWORD3>Function</KEYWORD3>
			<KEYWORD3>number</KEYWORD3>
			<KEYWORD3>Number</KEYWORD3>
			<KEYWORD3>object</KEYWORD3>
			<KEYWORD3>Object</KEYWORD3>
			<KEYWORD3>RegExp</KEYWORD3>
			<KEYWORD3>string</KEYWORD3>
			<KEYWORD3>String</KEYWORD3>
			<KEYWORD3>void</KEYWORD3>
		</KEYWORDS>
	</RULES><!-- }}} -->
</MODE>